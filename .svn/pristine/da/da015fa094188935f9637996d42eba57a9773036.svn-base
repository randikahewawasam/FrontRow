package com.frontrow.base;


import com.frontrow.android.db.FrontRowDBHelper;
import com.frontrow.android.services.OfflineMessageService;
import com.frontrow.common.Constants;
import com.frontrow.common.SharedMethods;
import com.frontrow.core.ApplicationUser;
import com.frontrow.interfaces.FRSAddNoteListener;
import com.frontrow.ui.FRSClientsNotes;
import com.frontrow.ui.FRSTabMenu;
import com.frontrow.ui.R;
import android.app.Activity;
import android.app.Dialog;
import android.app.ProgressDialog;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.res.Configuration;
import android.location.Address;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.Bundle;
import android.os.Handler;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.Window;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

public abstract class BaseActivity extends Activity implements LocationListener{

	protected Handler uiUpdateHandler;
	private Thread refreshThread = null;
	private boolean isVisible = false;
	protected byte connectionMode;
	public static Context currentContext;
	protected TextView userName;
	private String displayname;
	private ImageView networkStatus;
	protected abstract void initializeUI();
	protected abstract void refreshUI();
	private Intent intent;
	private ProgressDialog dialog;
	protected ApplicationUser appUsr,tempUsr;
	private ImageButton addnote;
	private FRSAddNoteListener addNoteListener;
	private LocationListener locationListener;
	protected LocationManager locationManager;
	protected String provider;

	/*public ApplicationControl getIdle(){
		return (ApplicationControl) this.getApplication();
	}*/


	public FRSAddNoteListener getAddNoteListener() {
		return addNoteListener;
	}
	public void setAddNoteListener(FRSAddNoteListener addNoteListener) {
		this.addNoteListener = addNoteListener;
	}
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		/* Getting the Screen dencity of the device*/	
		super.onCreate(savedInstanceState);	

		try{
			FRSTabMenu.myTabLayoutDemo.getWindow().setFeatureInt(Window.FEATURE_CUSTOM_TITLE,R.layout.frscustomtitle);
		}catch (Exception e) {
			// TODO: handle exception
			SharedMethods.logError("Error 1"+e.getMessage());
			try{
				getWindow().setFeatureInt(Window.FEATURE_CUSTOM_TITLE, R.layout.frscustomtitle);
			}catch (Exception e1) {
				// TODO: handle exception
				SharedMethods.logError("Error 2"+e.getMessage());
			}
		}




		DisplayMetrics metrics = new DisplayMetrics();
		getWindowManager().getDefaultDisplay().getMetrics(metrics);
		SharedMethods.logError("Appp : "+ metrics.densityDpi);

		appUsr = ApplicationUser.getSharedInstance();

		/* Restore values */
		if(savedInstanceState !=null){
			this.appUsr =	savedInstanceState.getParcelable(Constants.PARCEBLE_KEY);
			SharedMethods.logError("Loadeed : "+ this.appUsr.getCompanyId());
			tempUsr = ApplicationUser.getSharedInstance();
			if(FrontRowDBHelper.getContext() == null){
				FrontRowDBHelper.setContext(this);
			}
			setrestoreValues();
		}

		addnote = (ImageButton) findViewById(R.id.addnotebtn);
		userName = (TextView) findViewById(R.id.uname);	
		networkStatus = (ImageView) findViewById(R.id.onlinestatus);
		if(userName == null){
			userName = (TextView) FRSTabMenu.myTabLayoutDemo.findViewById(R.id.uname);	
			networkStatus = (ImageView) FRSTabMenu.myTabLayoutDemo.findViewById(R.id.onlinestatus);
			addnote = (ImageButton)  FRSTabMenu.myTabLayoutDemo.findViewById(R.id.addnotebtn);
		}

		uiUpdateHandler = new Handler();
		intent = new Intent(this, OfflineMessageService.class);
		initializeUI();	
		setName();
	}

	protected void refreshViewInTheUIThread() {
		uiUpdateHandler.post(new Runnable() {
			@Override
			public void run() {						
				refreshUI();				
			}
		});
	}

	private void setName() {		
		String name = ApplicationUser.getSharedInstance().getUserName();
		userName.setText(name);

	}

	protected void onDestroy() {
		//SharedMethods.logError("onDestroy **** " +mmn this);		
		super.onDestroy();
		//killAllObjectsAndExit();

	}

	protected void killAllObjectsAndExit() {
		System.runFinalizersOnExit(true);
		System.exit(0);
	}

	@Override
	protected void onResume() {


		isVisible = true;		
		super.onResume();
		/* Starts the service */
		if (addnote != null){
			if(this.getClass() == FRSClientsNotes.class){
				addnote.setVisibility(View.VISIBLE);
			}
			else{
				addnote.setVisibility(View.GONE);
			}
		}
		addActionListeners();
		startService(intent);
		registerReceiver(broadcastReceiver, new IntentFilter(OfflineMessageService.BROADCAST_ACTION));
	}

	@Override
	protected void onPause() {
		killThread();
		super.onPause();
		stopService(intent); 
		unregisterReceiver(broadcastReceiver);
	}

	@Override
	protected void onStop() {
		killThread();		
		super.onStop();
	}

	private void killThread() {
		isVisible = false;
	}
	public void setUserName(TextView userName) {
		this.userName = userName;
	}
	public String getDisplayname() {
		return displayname;
	}
	public void setDisplayname(String displayname) {
		this.displayname = displayname;
	}
	public TextView getUserName() {
		return userName;
	}
	public ImageView getNetworkStatus() {
		return networkStatus;
	}
	public void setNetworkStatus(ImageView networkStatus) {
		this.networkStatus = networkStatus;
	}

	private BroadcastReceiver broadcastReceiver = new BroadcastReceiver() {
		@Override
		public void onReceive(Context context, Intent intent) {
			updateUI(intent);       
		}
	};    


	private void updateUI(Intent intent) {
		boolean isOonline = intent.getBooleanExtra(Constants.NETWORK_STATUS,false); 
		SharedMethods.logError("Received ");
		if(isOonline){
			networkStatus.setImageResource(R.drawable.networkstatus);
		}else{
			networkStatus.setImageResource(R.drawable.networkstatusoofline);
		}
	}

/*	@Override
	protected Dialog onCreateDialog(int id) {
		// TODO Auto-generated method stub
		switch (id) {
		case Constants.SHOW_DIALOG:
			dialog = new ProgressDialog(this);
			dialog.setMessage(getResources().getString(R.string.PROGRESS_MSG));
			dialog.setTitle("");
			dialog.setIndeterminate(true);
			return dialog;
		case Constants.DISMISS_DIALOG:
			dialog.dismiss();
			break;
		case Constants.UPDATE_ALERT:
			return SharedMethods.createSingleButtonAlert(this);

		case Constants.SEARCH_MORE:
			dialog = new ProgressDialog(this);
			dialog.setMessage(getResources().getString(R.string.SEARCH_PROGRESS));
			dialog.setTitle("");
			dialog.setIndeterminate(true);
			return dialog;
		default:
			break;
		}
		return null;
	}*/

	@Override
	public void onUserInteraction() {
		// TODO Auto-generated method stub
		super.onUserInteraction();
		//().touch();
		SharedMethods.logError("User interacted screen "+this.toString());
	}

	@Override
	protected void onSaveInstanceState(Bundle outState) {
		// TODO Auto-generated method stub
		super.onSaveInstanceState(outState);
		SharedMethods.logError("Application FRS stored befored killed");
		outState.putParcelable(Constants.PARCEBLE_KEY, this.appUsr);
	}



	private void setrestoreValues(){
		/*		tempUsr.setCompanyId(this.appUsr.getCompanyId());
		tempUsr.setMobileNnumber(this.appUsr.getMobileNnumber());
		tempUsr.setOnline(this.appUsr.isOnline());
		tempUsr.setSaved(this.appUsr.isSaved());
		tempUsr.setPassword(this.appUsr.getPassword());
		tempUsr.setTempPwd(this.appUsr.getTempPwd());
		tempUsr.setToken(this.appUsr.getToken());
		tempUsr.setUserId(this.appUsr.getUserId());
		tempUsr.setUserName(this.appUsr.getUserName());*/

		tempUsr.setCompanyId(this.appUsr.getCompanyId());
		tempUsr.setMobileNnumber(this.appUsr.getMobileNnumber());
		tempUsr.setOnline(this.appUsr.isOnline());
		tempUsr.setSaved(this.appUsr.isSaved());
		tempUsr.setSingleView(this.appUsr.isSingleView());
		tempUsr.setPassword(this.appUsr.getPassword());
		tempUsr.setTempPwd(this.appUsr.getTempPwd());
		tempUsr.setToken(this.appUsr.getToken());
		tempUsr.setUserId(this.appUsr.getUserId());
		tempUsr.setUserName(this.appUsr.getUserName());
		tempUsr.setAllTerms(this.appUsr.getAllTerms());
		tempUsr.setAppVerstion(this.appUsr.getAppVerstion());
		SharedMethods.logError("Saved USer "+ appUsr.getMobileNnumber());
	}

	@Override
	protected void onRestoreInstanceState(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onRestoreInstanceState(savedInstanceState);
		SharedMethods.logError("Application Restored onRestoreInstanceState");
		if(savedInstanceState !=null)
			this.appUsr = savedInstanceState.getParcelable(Constants.PARCEBLE_KEY);
	}

	private void addActionListeners(){


		if(addnote != null){
			addnote.setOnClickListener(new OnClickListener() {

				@Override
				public void onClick(View v) {
					// TODO Auto-generated method stub
					addNoteListener.addNote(v);
					//showDialog(Constants.ADD_NOTE_DIALOG);
				}
			});

		}
	}
	
	protected void init() {
		locationManager = (LocationManager) this.getSystemService(Context.LOCATION_SERVICE);

		boolean enabled = locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER);

		/*		if (!enabled) {
			Intent intent = new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS);
			startActivity(intent);
		}*/
		locationListener = new LocationListener() {
			public void onLocationChanged(Location location) {
				// Called when a new location is found by the network location provider.

				locationReceived(location);
				//locationManager.removeUpdates(locationListener);
			}

			public void onStatusChanged(String provider, int status, Bundle extras) {}

			public void onProviderEnabled(String provider) {}

			public void onProviderDisabled(String provider) {}
		};

		// Check if enabled and if not send user to the GSP settings
		// Better solution would be to display a dialog and suggesting to 
		// go to the settings
		/*if (!enabled) {
			Intent intent = new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS);
			startActivity(intent);
		}*/
		/*Criteria criteria = highFineCriteria();
		provider = locationManager.getBestProvider(criteria, false);
		Location location = locationManager.getLastKnownLocation(provider);
		// Initialize the location fields
		if (location != null) {

			System.out.println("Provider " + provider + " has been selected.");
			onLocationChanged(location);

		}*/
		locationManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, 0, 0, locationListener);

	}
	public void locationReceived(Location location){
		double lat = location.getLatitude();
		double lng = location.getLongitude();
		appUsr.setLat(lat);
		appUsr.setLon(lng);
	
		//toast.show();
		SharedMethods.logError("Lat : "+Double.toString(lat)+"Lon : "+ Double.toString(lng));
	}
	@Override
	public void onLocationChanged(Location location) {
		// TODO Auto-generated method stub
		double lat = location.getLatitude();
		double lng = location.getLongitude();
		Toast toast = Toast.makeText(this, Double.toString(lat) + ", "+ Double.toString(lng), 5000);
	
		toast.show();
		SharedMethods.logError("Lat : "+Double.toString(lat)+"Lon : "+ Double.toString(lng));

	}

	@Override
	public void onProviderDisabled(String provider) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onProviderEnabled(String provider) {
		// TODO Auto-generated method stub

	}
	@Override
	public void onStatusChanged(String provider, int status, Bundle extras) {
		// TODO Auto-generated method stub

	}
}
