package com.frontrow.ui;

import java.util.ArrayList;

import com.frontrow.base.BaseActivity;
import com.frontrow.common.Constants;
import com.frontrow.common.Constants.ContactType;
import com.frontrow.common.SharedMethods;
import com.frontrow.datamanagers.AuthDataManager;
import com.frontrow.datamanagers.ContactsDataManager;
import com.memobile.connection.AsyncHttpClient;
import com.memobile.connection.ResponseHandler;
import com.row.mix.beans.Address;
import com.row.mix.beans.Contact;
import com.row.mix.beans.ContactRelationship;
import com.row.mix.response.CompositeContactResponse;
import com.row.mix.response.ContactsResponse;

import android.os.Bundle;
import android.provider.ContactsContract.CommonDataKinds.Phone;
import android.app.Activity;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.Spinner;
import android.widget.TableRow;
import android.widget.TextView;

public class FRSContactMaintenance extends BaseActivity implements OnItemSelectedListener {

	private Spinner contactrelationshipTypeSpinner;
	private Spinner addressrelationshipTypeSpinner;
	private Spinner phonerelationshipTypeSpinner;
	private ArrayList<RelationshipTypeSpinner> ctypeList;
	private ArrayList<RelationshipTypeSpinner> atypeList;
	private ArrayList<RelationshipTypeSpinner> ptypeList;
	private TextView addressText;
	private TextView phoneText;
	private TableRow phonerow;
	private boolean isNewRecord;
	private EditText salutation;
	private EditText firstname;
	private EditText lastname;
	private CheckBox primary;
	private EditText email;
	private EditText title;
	private EditText number1;
	private EditText number2;
	private EditText street;
	private EditText city;
	private EditText province;
	private EditText postal;
	private EditText country;
	private ArrayList<ContactRelationship> contactRelationshipTypeList;
	private ArrayList<ContactRelationship> addressRelationshipTypeList;
	private ArrayList<ContactRelationship> phoneRelationshipTypeList;
	private int contactId;
	private int clientId;
	private Button contactDeleteBtn;
	private Button createContact;
	private Object response;


	@Override
	public void onCreate(Bundle savedInstanceState) {

		setContentView(R.layout.activity_frscontact_maintenance);
		if(getIntent().getExtras() != null){
			contactId = getIntent().getExtras().getInt(Constants.CONTACT_ID);
			clientId = getIntent().getExtras().getInt(Constants.CLIENT_ID);
		}    
		View newContactMaintanceView = LayoutInflater.from(this.getParent()).inflate(R.layout.activity_frscontact_maintenance, null);
		setContentView(newContactMaintanceView);
		super.onCreate(savedInstanceState);


	}

	@Override
	protected void initializeUI() {

		salutation = (EditText)findViewById(R.id.salutationid);
		firstname = (EditText)findViewById(R.id.firstnameid);
		lastname = (EditText)findViewById(R.id.lastnameid);
		email = (EditText)findViewById(R.id.emailid);
		title = (EditText)findViewById(R.id.titleid);
		primary = (CheckBox)findViewById(R.id.primary_chk_boxid);

		number1 =(EditText) findViewById(R.id.number1id);
		number2 =(EditText) findViewById(R.id.number2id);

		street =(EditText) findViewById(R.id.streetid);
		city =(EditText) findViewById(R.id.cityid);
		province = (EditText) findViewById(R.id.provinceid);
		postal = (EditText) findViewById(R.id.postalid);
		country = (EditText) findViewById(R.id.countryid);

		ctypeList =new ArrayList<RelationshipTypeSpinner>();
		atypeList =new ArrayList<RelationshipTypeSpinner>();
		ptypeList =new ArrayList<RelationshipTypeSpinner>();
		contactrelationshipTypeSpinner =(Spinner) findViewById(R.id.contactreltypes);
		addressrelationshipTypeSpinner = (Spinner) findViewById(R.id.addreltypes);
		phonerelationshipTypeSpinner = (Spinner) findViewById(R.id.phnreltypes);
		contactDeleteBtn = (Button) findViewById(R.id.condeletebtn);
		createContact = (Button) findViewById(R.id.conaddbtn);
		Bundle bundle = getIntent().getExtras();
		if (bundle != null) {
			isNewRecord=bundle.getBoolean(Constants.NEW_CONTACT_RECORD);
			//.setText(clientName);
		}

		contactRelationshipTypeList=AuthDataManager.getSharedInstance().getClientContactList();
		addressRelationshipTypeList=AuthDataManager.getSharedInstance().getContactAddressList();
		phoneRelationshipTypeList = AuthDataManager.getSharedInstance().getContactPhoneList();

		for(ContactRelationship type : this.addressRelationshipTypeList){
			atypeList.add(new RelationshipTypeSpinner(type.getRelationshipText(), type.getId()));
		}

		for(ContactRelationship type : this.contactRelationshipTypeList){
			ctypeList.add(new RelationshipTypeSpinner(type.getRelationshipText(), type.getId()));
		}

		for(ContactRelationship type : this.phoneRelationshipTypeList){
			ptypeList.add(new RelationshipTypeSpinner(type.getRelationshipText(), type.getId()));
		}


		ArrayAdapter<RelationshipTypeSpinner> cTypeAdapter = new ArrayAdapter<RelationshipTypeSpinner>(this, R.layout.spinnertext, ctypeList);
		cTypeAdapter.setDropDownViewResource(R.layout.spinnerdropdown);
		contactrelationshipTypeSpinner.setAdapter(cTypeAdapter);

		contactrelationshipTypeSpinner.setOnItemSelectedListener(this);

		ArrayAdapter<RelationshipTypeSpinner> aTypeAdapter = new ArrayAdapter<RelationshipTypeSpinner>(this, R.layout.spinnertext, atypeList);
		aTypeAdapter.setDropDownViewResource(R.layout.spinnerdropdown);
		addressrelationshipTypeSpinner.setAdapter(aTypeAdapter);

		addressrelationshipTypeSpinner.setOnItemSelectedListener(this);

		ArrayAdapter<RelationshipTypeSpinner> pTypeAdapter = new ArrayAdapter<RelationshipTypeSpinner>(this, R.layout.spinnertext, ptypeList);
		pTypeAdapter.setDropDownViewResource(R.layout.spinnerdropdown);
		phonerelationshipTypeSpinner.setAdapter(pTypeAdapter);		   
		phonerelationshipTypeSpinner.setOnItemSelectedListener(this);

		// TODO Auto-generated method stub
		boolean contactstyle = AuthDataManager.getSharedInstance().getContactStyle();
		addressText = (TextView) findViewById(R.id.addressdetailtextid);
		phoneText =(TextView) findViewById(R.id.phonedetailtextid);
		phonerow = (TableRow) findViewById(R.id.number1row);

		if(Constants.contactType == ContactType.Add_Contact){
			createContact.setVisibility(View.VISIBLE);
			contactDeleteBtn.setVisibility(View.GONE);
			salutation.setEnabled(true);
			firstname.setEnabled(true);
			lastname.setEnabled(true);
			email.setEnabled(true);
			title.setEnabled(true);
			primary.setEnabled(true);

			number1.setEnabled(true);
			number2.setEnabled(true);

			street.setEnabled(true);
			city.setEnabled(true);
			province.setEnabled(true);
			postal.setEnabled(true);
			postal.setEnabled(true);
			country.setEnabled(true);

			contactrelationshipTypeSpinner.setEnabled(true);
			addressrelationshipTypeSpinner.setEnabled(true);
			phonerelationshipTypeSpinner.setEnabled(true);
		}
		else
		{
			createContact.setVisibility(View.GONE);
			contactDeleteBtn.setVisibility(View.VISIBLE);
			salutation.setEnabled(false);
			firstname.setEnabled(false);
			lastname.setEnabled(false);
			email.setEnabled(false);
			title.setEnabled(false);
			primary.setEnabled(false);

			number1.setEnabled(false);
			number2.setEnabled(false);

			street.setEnabled(false);
			city.setEnabled(false);
			province.setEnabled(false);
			postal.setEnabled(false);
			postal.setEnabled(false);
			country.setEnabled(false);

			contactrelationshipTypeSpinner.setEnabled(false);
			addressrelationshipTypeSpinner.setEnabled(false);
			phonerelationshipTypeSpinner.setEnabled(false);
			setData();
		}

		if(contactstyle){
			phonerow.setVisibility(View.VISIBLE);
			phoneText.setText(getResources().getString(R.string.PHONE_NUMBER_TXT));
			addressText.setText(getResources().getString(R.string.ADDRESS_TXT));
			addressrelationshipTypeSpinner.setVisibility(View.VISIBLE);
			phonerelationshipTypeSpinner.setVisibility(View.VISIBLE);
		}
		else
		{
			addressrelationshipTypeSpinner.setVisibility(View.VISIBLE);
			phonerelationshipTypeSpinner.setVisibility(View.VISIBLE);
			phonerow.setVisibility(View.GONE);
			phoneText.setText(getResources().getString(R.string.PRIMARY_PHONE_NUMBER_TXT));
			addressText.setText(getResources().getString(R.string.PRIMARY_ADDRESS_TXT));	
		}
		addActionListeners();

	}

	private void addActionListeners() {
		contactDeleteBtn.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				getParent().showDialog(Constants.SHOW_DIALOG);
				AsyncHttpClient httpClient = new AsyncHttpClient(
						Constants.BASE_URL+Constants.CONATCT_ADD_EDIT_DELETE"
								+ contactId+"/"+clientId);
				httpClient.setBasicAuthToken(appUsr.getToken());
				httpClient.delete(FRSContactMaintenance.this, null, null,
						new ResponseHandler() {

					@Override
					public void onSuccess(String successMsg) {
						// TODO Auto-generated method stub
						super.onSuccess(successMsg);
						SharedMethods.logError("Delete Contact "+successMsg);
						ContactsResponse contactResponse = new ContactsResponse(successMsg, 200, "");
						response = contactResponse;
						refreshViewInTheUIThread();
					}

					@Override
					public void onFailure(int statusCode, String content) {
						// TODO Auto-generated method stub
						super.onFailure(statusCode, content);
						SharedMethods.logError("Delete Contact error "+content);
						ContactsResponse contactResponse = new ContactsResponse(content, statusCode, getResources().getString(R.string.NO_NETWORK_TRY_AGAIN_MSG));
						response = contactResponse;
						refreshViewInTheUIThread();
					}
				},null);
			}
		});

		createContact.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				getParent().showDialog(Constants.SHOW_DIALOG);
				AsyncHttpClient httpClient = new AsyncHttpClient(
						Constants.BASE_URL+Constants.CONATCT_ADD_EDIT_DELETE);
				
			}
		});
	}

	@Override
	protected void refreshUI() {
		// TODO Auto-generated method stub
		getParent().removeDialog(Constants.SHOW_DIALOG);
		if(response instanceof ContactsResponse){
			ContactsDataManager.getSharedInstance().setContactlist((ContactsResponse) response);
			if(((ContactsResponse) response).getContactslist() != null && ((ContactsResponse) response).getContactslist().size() > 0){
				finish();
			}else{
				com.frontrow.ui.TabManager parentActivity = (TabManager) getParent();
				parentActivity.loadInitialActivity();
			}
		}
	}

	@Override
	public void onItemSelected(AdapterView<?> arg0, View arg1, int arg2,
			long arg3) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onNothingSelected(AdapterView<?> arg0) {
		// TODO Auto-generated method stub

	}


	private void setData() {
		ArrayList<Contact> contactlist = ContactsDataManager.getSharedInstance().getContactslist();
		ArrayList<ContactRelationship> contactRelationshipList=	AuthDataManager.getSharedInstance().getClientContactList();
		ArrayList<ContactRelationship> phoneRelationshipList = AuthDataManager.getSharedInstance().getContactPhoneList();
		ArrayList<ContactRelationship> addressRelationshipList = AuthDataManager.getSharedInstance().getContactAddressList();

		Contact contact = null;
		int phoneRelationShipId;
		//if(contactId != 0){
		if(contactlist != null && contactlist.size() > 0){
			for(int i=0;i<contactlist.size();i++){
				contact = contactlist.get(i);
				if(contact.getId() == contactId){
					break;
				}
			}

			if(contact != null){
				salutation.setText(contact.getSalutation());
				firstname.setText(contact.getFirstName());
				lastname.setText(contact.getLastName());
				title.setText(contact.getTitle());
				email.setText(contact.getEmail());
				primary.setChecked(contact.isPrimary());
				number2.setText(contact.getPrimaryPhone().getPhoneNumber());
				ArrayList<com.row.mix.beans.Phone> phnList = contact.getPhoneList();
				ArrayList<Address> addressList = contact.getAddressList();
				int contactRelationshipId = contact.getRelationshipId();					

				/* set Contact Relationship */
				int cRelatPosition = 0;
				int phnRelationshipPosition = 0;
				int addressRelationshipId = 0;

				for(int i=0;i<contactRelationshipList.size();i++){
					ContactRelationship cRelat = contactRelationshipList.get(i);
					if(cRelat.getId() == contact.getRelationshipId()){
						cRelatPosition = i;
						break;
					}
				}
				contactrelationshipTypeSpinner.setSelection(cRelatPosition);

				/*set phone relationship */
				for(com.row.mix.beans.Phone tempPhn:phnList){
					if(tempPhn.getPhoneID() == contact.getPrimaryPhone().getPhoneID()){
						for(int i=0;i<phoneRelationshipList.size();i++){
							ContactRelationship cRelat = phoneRelationshipList.get(i);
							if(cRelat.getId() == tempPhn.getPhnRelationshipId()){
								phoneRelationShipId = i;
								break;
							}
						}							
					}
				}


				phonerelationshipTypeSpinner.setSelection(phnRelationshipPosition);

				/*set address relationship */
				for(Address tempAdd:addressList){
					if(tempAdd.getId() == contact.getPrimaryAddress().getId()){
						for(int i=0;i<addressRelationshipList.size();i++){
							ContactRelationship cRelat = addressRelationshipList.get(i);
							if(cRelat.getId() == tempAdd.getAddressRelationshipId()){
								addressRelationshipId = i;
								break;
							}
						}							
					}
				}
				addressrelationshipTypeSpinner.setSelection(addressRelationshipId);
				/* Set primary Address Values */
				street.setText(contact.getPrimaryAddress().getStreet());
				city.setText(contact.getPrimaryAddress().getCity());
				province.setText(contact.getPrimaryAddress().getProvince());
				postal.setText(contact.getPrimaryAddress().getPostal());
				country.setText(contact.getPrimaryAddress().getCountry());
			}
		}
		//}
	}
}
class RelationshipTypeSpinner{
	String relationshipName ="";
	int relationshipId;

	public RelationshipTypeSpinner(String relationshipName,int relationshipId) {
		// TODO Auto-generated constructor stub
		this.relationshipName = relationshipName;
		this.relationshipId = relationshipId;
	}
	public String getRelationshipName() {
		return relationshipName;
	}

	public int getRelationshipId() {
		return relationshipId;
	}

	@Override
	public String toString() {
		// TODO Auto-generated method stub
		return relationshipName;
	}
}
