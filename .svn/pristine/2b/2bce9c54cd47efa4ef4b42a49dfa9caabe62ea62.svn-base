package com.frontrow.common;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;

import com.row.mix.beans.Questions;

import android.util.Log;

public class SharedMethods {

	public String md5(String s) {
		try {
			// Create MD5 Hash
			MessageDigest digest = java.security.MessageDigest.getInstance("MD5");
			digest.update(s.getBytes());
			byte messageDigest[] = digest.digest();

			// Create Hex String
			StringBuffer hexString = new StringBuffer();
			for (int i=0; i<messageDigest.length; i++)
				hexString.append(Integer.toHexString(0xFF & messageDigest[i]));
			return hexString.toString();

		} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
		}
		return "";
	}

	public static void logMessage(String message) {
		Log.d(Constants.APP_DEBUG_TAG, message);
	}

	public static void logMessage(Class<?> className, String message) {
		Log.d(Constants.APP_DEBUG_TAG, className.getName() + " : " + message);
	}

	public static void logError(String errMessage) {
		if(errMessage != null)
			Log.e(Constants.APP_DEBUG_TAG, errMessage);
	}

	// To use in the catching exceptions
	public synchronized static void logException(Exception exception,
			Class<?> className) {
		if (exception.getMessage() != null) {
			Log.e(Constants.APP_DEBUG_TAG, className.getName() + " : "
					+ exception.getMessage());
		}
	}



	public static LinkedHashMap<Questions, String> sortByComparator(LinkedHashMap<Questions, String> unsortMap) {
		Map<Questions, String> rollCall = unsortMap;

		Collection<Questions> question = unsortMap.keySet();
		List<Questions> questionlist = new ArrayList<Questions>(question);
		Collections.sort(questionlist, new Comparator<Questions>() {

			@Override
			public int compare(Questions lhs, Questions rhs) {
				// TODO Auto-generated method stub
				int x= lhs.getSequence();
				int y = rhs.getSequence();
				return  x-y ;
			}
		});
		LinkedHashMap<Questions, String> sortedMap = new LinkedHashMap<Questions, String>();
		Iterator<Questions> itr = questionlist.iterator();
		while(itr.hasNext()){
			Questions tmpQ = itr.next();
			sortedMap.put(tmpQ, unsortMap.get(tmpQ));
			SharedMethods.logError("Sequence : "+ tmpQ.getSequence());
		}

		return sortedMap;
	}
}
