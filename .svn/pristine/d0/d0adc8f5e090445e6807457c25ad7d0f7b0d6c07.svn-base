package com.frontrow.ui;

import java.util.LinkedList;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.os.Bundle;
import android.view.KeyEvent;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.Window;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import com.frontrow.adapters.FrontRowMessageAdapter;
import com.frontrow.android.db.MessagesDB;
import com.frontrow.android.json.JSONException;
import com.frontrow.android.json.JSONObject;
import com.frontrow.base.BaseActivity;
import com.frontrow.common.Constants;
import com.frontrow.common.SharedMethods;
import com.frontrow.core.ApplicationUser;
import com.frontrow.datamanagers.FRSOfflineMessageDataManager;
import com.frontrow.interfaces.IFrontResponseReceiver;
import com.frontrow.language.LanguageManager;
import com.memobile.connection.AsyncHttpClient;
import com.memobile.connection.ResponseHandler;
import com.row.mix.beans.OfflineM;
import com.row.mix.common.MIXKeys;
import com.row.mix.response.CardSubmitResponse;
import com.row.mix.response.OfflineResponse;

public class FRSMessages extends BaseActivity implements IFrontResponseReceiver{
	private LinkedList<OfflineM> mList;
	private FrontRowMessageAdapter msgAdapter;
	private ListView msgList;
	private TextView notification;
	private OfflineResponse res;
	private OfflineM offMsg;
	private Object response;
	//private ApplicationUser appUsr;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub	
		//requestWindowFeature(Window.FEATURE_CUSTOM_TITLE);
		setContentView(R.layout.frsmessagelist);		
		super.onCreate(savedInstanceState);
	}

	@Override
	protected void initializeUI() {
		// TODO Auto-generated method stub
		titlename.setText("Message Queue");
		//appUsr = ApplicationUser.getSharedInstance();
		notification = (TextView) findViewById(R.id.notification);
		msgList = (ListView) findViewById(R.id.msgList);
		addListeners();
	}

	@Override
	protected void refreshUI() {
		// TODO Auto-generated method stub
		/*	removeDialog(Constants.SHOW_DIALOG);
		if(res.getResponseCode() == Constants.NETWORK_SUCCESS){
			Toast toast = Toast.makeText(this.getParent(), getResources().getString(R.string.ANSWER_CARD_SUBMIT_SUCCESS), 5000);
			toast.show();
		}else if(res.getResponseCode() == Constants.NETWORK_NOT_AVAILABLE){
			Toast toast = Toast.makeText(this.getParent(), getResources().getString(R.string.NETWRK_ERR_SAVED_TO_DB), 5000);
			toast.show();
		}else if(res.getResponseCode() == Constants.NETWORK_PARSE_ERROR){
			Toast toast = Toast.makeText(this.getParent(), getResources().getString(R.string.CARD_ERROR), 5000);
			toast.show();
		}*/
		getParent().removeDialog(Constants.SHOW_DIALOG);
		if (response instanceof OfflineResponse) {
			// getInflatedProgress().setVisibility(View.GONE);
			int code = ((OfflineResponse) response).getResponseCode();
			if (code == Constants.NETWORK_SUCCESS) {

				offMsg.setStatus(Constants.SUCCESS);

				new MessagesDB(this).addOfflineMessages(offMsg, appUsr.getUserId());


				Toast toast = Toast.makeText(this,
						getResources().getString(R.string.CARD_SUMBIT_MSG),
						5000);
				toast.show();

			} else if (code==Constants.CONNECT_TO_SERVER_ERROR) {

				offMsg.setStatus(Constants.PENDING);

				new MessagesDB(this).addOfflineMessages(offMsg, appUsr.getUserId());

				Toast toast = Toast.makeText(this,
						getResources().getString(R.string.NETWOK_UNREACHABLE),
						5000);
				toast.show();
			}
			else if (code == Constants.NETWORK_PARSE_ERROR){

				offMsg.setStatus(Constants.FAILED);

				new MessagesDB(this).addOfflineMessages(offMsg, appUsr.getUserId());

				Toast toast = Toast.makeText(this.getParent(),
						((OfflineResponse) response).getResponseMessage(),
						5000);
				toast.show();

			}

		}


		this.mList = new MessagesDB(this).getAllMessages(this.appUsr.getUserId());
		msgAdapter = new FrontRowMessageAdapter(this, R.layout.frsmessagelist, mList);
		msgList.setAdapter(msgAdapter);
		msgAdapter.notifyDataSetChanged();
	}

	@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
		titlename.setText("Message Queue");
		FRSOfflineMessageDataManager.getSharedInstance().registerForDineSafe(this);
		MessagesDB db =new MessagesDB(this);
		//db.open();
		this.mList = new MessagesDB(this).getAllMessages(appUsr.getUserId());


		if(mList != null && !mList.isEmpty()){
			msgAdapter = new FrontRowMessageAdapter(this, R.layout.frsmessagelist, mList);
			msgList.setAdapter(msgAdapter);
			msgAdapter.notifyDataSetChanged();
		}else{
			notification.setText(getResources().getString(R.string.EMPTY_MSG_LIST));
		}		

	}

	@Override
	protected void onPause() {
		// TODO Auto-generated method stub
		super.onPause();
		FRSOfflineMessageDataManager.getSharedInstance().unregisterForDineSafe(this);
	}

	private void addListeners() {
		msgList.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> arg0, View arg1, int position,
					long arg3) {
				// TODO Auto-generated method stub
				OfflineM off =(OfflineM) msgList.getItemAtPosition(position);
				if(off.getStatus() == Constants.PENDING || off.getStatus() == Constants.FAILED){
					confirmationAlert(off);
				}
			}
		});
	}

	@Override
	protected void onSaveInstanceState(Bundle outState) {
		// TODO Auto-generated method stub
		super.onSaveInstanceState(outState);
		//this.finish();
	}

	private void confirmationAlert(final OfflineM msg) {
		new AlertDialog.Builder(this.getParent()).setTitle(LanguageManager.getString(R.string.SALES_PRO)).setMessage(LanguageManager.getString(R.string.RETRY_MSG)).setCancelable(false).setNeutralButton(
				LanguageManager.getString(R.string.YES),
				new DialogInterface.OnClickListener() {
					@Override
					public void onClick(DialogInterface dialog, int which) {
						getParent().showDialog(Constants.SHOW_DIALOG);
						//new MessagesDB(this);
						new MessagesDB(getApplicationContext()).deleteList(appUsr.getUserId(), msg.getId());
						//FRSOfflineMessageDataManager.getSharedInstance().sendOfflineMessages(msg);	

						String message = msg.getMessage().toString(); 

						String jstring = message;

						offMsg = new OfflineM();
						offMsg.setMessage(msg.getMessage());
						offMsg.setDateMillies(java.lang.System.currentTimeMillis());
						offMsg.setType(Constants.MESSAGE);
						offMsg.setSubmitType(Constants.SUBMIT_TYPE);
						offMsg.setClientName(msg.getClientName());

						AsyncHttpClient httpClient;
						if(msg.getType().equals(Constants.MESSAGE)){
							httpClient = new AsyncHttpClient(
									Constants.BASE_URL+Constants.SUBMIT_TYPE);
						}
						else{
							httpClient = new AsyncHttpClient(
									Constants.BASE_URL+Constants.CLIENT_TYPE);  

						}
						httpClient.setBasicAuthToken(appUsr.getToken());
						// httpClient.setMethod("PUT");
						httpClient.post(FRSMessages.this, null, null,
								new ResponseHandler() {
							@Override
							public void onSuccess(String successMsg) {
								// TODO Auto-generated method stub
								super.onSuccess(successMsg);
								OfflineResponse cardRes = new OfflineResponse(
										successMsg, 200, "Success", offMsg);

								refreshView(cardRes.getResponseCode(), cardRes.getResponseMessage(), cardRes);
							}

							@Override
							public void onFailure(int statusCode, String content) {
								// TODO Auto-generated method stub
								super.onFailure(statusCode, content);

								OfflineResponse cardRes = new OfflineResponse(
										content, statusCode, getResources().getString(
												R.string.NETWOK_UNREACHABLE), offMsg);

								refreshView(
										statusCode,
										getResources().getString(
												R.string.NETWOK_UNREACHABLE), cardRes);
							}

							@Override
							public void onFailed(String errorMsg, int errorCode) {
								// TODO Auto-generated method stub
								super.onFailed(errorMsg, errorCode);
							}

							@Override
							public void onFailure(Throwable error, String content) {
								// TODO Auto-generated method stub
								super.onFailure(error, content);
								OfflineResponse cardRes = new OfflineResponse(
										content, 400, getResources().getString(
												R.string.NETWOK_UNREACHABLE), offMsg);

								refreshView(
										400,
										getResources().getString(
												R.string.NETWOK_UNREACHABLE), cardRes);
							}
						}, jstring);


					}
				}).setNegativeButton(LanguageManager.getString(R.string.NO),new DialogInterface.OnClickListener() {

					@Override
					public void onClick(DialogInterface dialog,int which) {

					}
				}).show();
	}

	private void refreshView(int code, String msg, OfflineResponse authRes) {
		// ClientsNoteDataManager.getSharedInstance().setClientsNote((authRes));
		// tempNote.setId(authRes.getNoteId());

		response = authRes;
		refreshViewInTheUIThread();
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// TODO Auto-generated method stub
		MenuInflater inflater = getMenuInflater();
		inflater.inflate(R.menu.messagemenu, menu);	
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// TODO Auto-generated method stub
		switch (item.getItemId()) {
		case R.id.del:			
			this.mList = new MessagesDB(this).getAllMessagesForUser(appUsr.getUserId(), Constants.SUCCESS);
			msgAdapter = new FrontRowMessageAdapter(this, R.layout.frsmessagelist, mList);
			msgList.setAdapter(msgAdapter);
			msgAdapter.notifyDataSetChanged();
			break;
		case R.id.pen:	

			this.mList = new MessagesDB(this).getAllMessagesForUser(appUsr.getUserId(), Constants.PENDING);
			msgAdapter = new FrontRowMessageAdapter(this, R.layout.frsmessagelist, mList);
			msgList.setAdapter(msgAdapter);
			msgAdapter.notifyDataSetChanged();
			break;
		case R.id.all:			
			this.mList = new MessagesDB(this).getAllMessages(appUsr.getUserId());			
			msgAdapter = new FrontRowMessageAdapter(this, R.layout.frsmessagelist, mList);
			msgList.setAdapter(msgAdapter);
			msgAdapter.notifyDataSetChanged();
			break;
		case R.id.failed:
			this.mList = new MessagesDB(this).getAllMessagesForUser(appUsr.getUserId(), Constants.FAILED);		
			msgAdapter = new FrontRowMessageAdapter(this, R.layout.frsmessagelist, mList);
			msgList.setAdapter(msgAdapter);
			msgAdapter.notifyDataSetChanged();
		default:
			break;
		}
		return true;
	}

	public LinkedList<OfflineM> getmList() {
		return mList;
	}

	public void setmList(LinkedList<OfflineM> mList) {
		this.mList = mList;
	}

	@Override
	public void webResponseRecievedFromDataManager(Object response) {
		// TODO Auto-generated method stub
		this.response = 999;
		if(response instanceof OfflineResponse){
			refreshViewInTheUIThread();
		}
	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		// TODO Auto-generated method stub
		return getParent().onKeyDown(keyCode, event);
	}

}
