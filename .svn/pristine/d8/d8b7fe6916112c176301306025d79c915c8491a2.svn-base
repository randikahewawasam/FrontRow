package com.frontrow.ui;

import java.util.ArrayList;
import java.util.List;

import com.frontrow.base.BaseActivity;
import com.frontrow.common.Constants;
import com.frontrow.common.SharedMethods;
import com.frontrow.common.Constants.AddressType;
import com.frontrow.common.Constants.PhoneType;
import com.frontrow.datamanagers.AuthDataManager;
import com.frontrow.datamanagers.ContactsDataManager;
import com.frontrow.interfaces.FRSAddNewPhoneListener;
import com.google.gson.Gson;
import com.memobile.connection.AsyncHttpClient;
import com.memobile.connection.ResponseHandler;
import com.row.mix.beans.Address;
import com.row.mix.beans.Contact;
import com.row.mix.beans.ContactRelationship;
import com.row.mix.beans.Phone;
import com.row.mix.request.NewAddress;
import com.row.mix.request.NewPhone;
import com.row.mix.response.AddNewAddressRespone;
import com.row.mix.response.AddNewPhoneResponse;

import android.os.Bundle;
import android.app.Activity;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.Spinner;
import android.widget.AdapterView.OnItemSelectedListener;

public class FRSPhoneMaintenance extends BaseActivity implements OnItemSelectedListener,FRSAddNewPhoneListener{

	private int contactId;
	private Contact contact;
	private int clientId;
	private Phone phone;
	private EditText number;
	private CheckBox primary;
	private Spinner phonerelationshipTypeSpinner;
	private ArrayList<RelationshipTypeSpinner> ptypeList;
	private ArrayList<ContactRelationship> phoneRelationshipTypeList;
	private Button deletebtn;
	private Button addbtn;
	private NewPhone newPhone;
	private int phoneRelationshipId;
	private Object response;
	
    @Override
    public void onCreate(Bundle savedInstanceState) {
        //super.onCreate(savedInstanceState);
        //setContentView(R.layout.activity_frsphone_maintenance);
        
        
    	setContentView(R.layout.activity_frsphone_maintenance);
        View newAddressMaintanceView = LayoutInflater.from(this.getParent()).inflate(R.layout.activity_frsphone_maintenance, null);
        setContentView(newAddressMaintanceView);
        
        if(getIntent().getExtras() != null){
        	//address = getIntent().getExtras().getInt(Constants.CONTACT_ID);
			//clientId = getIntent().getExtras().getInt(Constants.CLIENT_ID);
        	contactId = getIntent().getExtras().getInt(Constants.CONTACT_ID);
        	clientId =getIntent().getExtras().getInt(Constants.CLIENT_ID);
        	if(Constants.phoneType == PhoneType.Delete_Phone){
        		phone = (Phone) getIntent().getExtras().getSerializable(Constants.PHONE_TXT);
			
        	}
		} 
        super.onCreate(savedInstanceState);
    }


	@Override
	public void onItemSelected(AdapterView<?> arg0, View arg1, int position,
			long arg3) {
		if(arg0 == phonerelationshipTypeSpinner){
			RelationshipTypeSpinner cs = ptypeList.get(position);
			phoneRelationshipId = cs.getRelationshipId();
		}
		
	}



	@Override
	public void onNothingSelected(AdapterView<?> arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	protected void initializeUI() {
		number = (EditText)findViewById(R.id.phnmain_numberid);
		ptypeList =new ArrayList<RelationshipTypeSpinner>();
		phonerelationshipTypeSpinner =(Spinner) findViewById(R.id.phnmain_reltypes);
		primary = (CheckBox) findViewById(R.id.phnmain_primary_chk_boxid);
		phoneRelationshipTypeList=AuthDataManager.getSharedInstance().getContactPhoneList();
        deletebtn = (Button)findViewById(R.id.phndeletebtn); 
        addbtn =(Button)findViewById(R.id.phn_addbtn); 
        
        for(ContactRelationship type : this.phoneRelationshipTypeList){
			ptypeList.add(new RelationshipTypeSpinner(type.getRelationshipText(), type.getId()));
		}


	ArrayAdapter<RelationshipTypeSpinner> pTypeAdapter = new ArrayAdapter<RelationshipTypeSpinner>(this, R.layout.spinnertext, ptypeList);
		pTypeAdapter.setDropDownViewResource(R.layout.spinnerdropdown);
		phonerelationshipTypeSpinner.setAdapter(pTypeAdapter);
		phonerelationshipTypeSpinner.setOnItemSelectedListener(this);
		
		if(Constants.phoneType == PhoneType.Add_Phone){
			enableComponents();
		}
		else
		{
			disableComponets();
			setData();
		}
		
		
		
		addbtn.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				if(Constants.phoneType == PhoneType.Add_Phone){
  					getParent().showDialog(Constants.SHOW_DIALOG);
  					NewPhone newPhone = addEditPhone();
					Gson gson = new Gson();
					String str = gson.toJson(newPhone);
					AsyncHttpClient httpClient = new AsyncHttpClient(Constants.BASE_URL+Constants.PHONE_ADD);				
					httpClient.setBasicAuthToken(appUsr.getToken());
					httpClient.post(FRSPhoneMaintenance.this, null, null, new ResponseHandler(){

						@Override
						public void onSuccess(String successMsg) {
							// TODO Auto-generated method stub
							super.onSuccess(successMsg);
							//SharedMethods.logError("Create Contact "+successMsg);
							AddNewPhoneResponse contactResponse = new AddNewPhoneResponse(successMsg, 200, "");
							response = contactResponse;
							refreshViewInTheUIThread();
						}

						@Override
						public void onFailure(int statusCode, String content) {
							// TODO Auto-generated method stub
							super.onFailure(statusCode, content);
							//SharedMethods.logError("Create Contact Error "+content);
							AddNewPhoneResponse contactResponse = new AddNewPhoneResponse(content, statusCode, getResources().getString(R.string.NO_NETWORK_TRY_AGAIN_MSG));
							response = contactResponse;
							refreshViewInTheUIThread();
						}

					}, str);
				}
				else if(Constants.phoneType == PhoneType.Edit_Phone){
					getParent().showDialog(Constants.SHOW_DIALOG);
  					NewPhone newPhone = addEditPhone();
					Gson gson = new Gson();
					String str = gson.toJson(newPhone);
					AsyncHttpClient httpClient = new AsyncHttpClient(Constants.BASE_URL+Constants.PHONE_ADD);				
					httpClient.setBasicAuthToken(appUsr.getToken());
					httpClient.put(FRSPhoneMaintenance.this, null, null, new ResponseHandler(){

						@Override
						public void onSuccess(String successMsg) {
							// TODO Auto-generated method stub
							super.onSuccess(successMsg);
							//SharedMethods.logError("Create Contact "+successMsg);
							AddNewPhoneResponse contactResponse = new AddNewPhoneResponse(successMsg, 200, "");
							response = contactResponse;
							refreshViewInTheUIThread();
						}

						@Override
						public void onFailure(int statusCode, String content) {
							// TODO Auto-generated method stub
							super.onFailure(statusCode, content);
							//SharedMethods.logError("Create Contact Error "+content);
							AddNewPhoneResponse contactResponse = new AddNewPhoneResponse(content, statusCode, getResources().getString(R.string.NO_NETWORK_TRY_AGAIN_MSG));
							response = contactResponse;
							refreshViewInTheUIThread();
						}

					}, str);
					
				}
				
			}
		});
		
		deletebtn.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
/*				getParent().showDialog(Constants.SHOW_DIALOG);
				NewPhone newPhone = addEditPhone();
				AsyncHttpClient httpClient = new AsyncHttpClient(
						Constants.BASE_URL+Constants.PHONE_DELETE+phone.getPhoneID());
				httpClient.setBasicAuthToken(appUsr.getToken());
				httpClient.delete(FRSPhoneMaintenance.this, null, null,
						new ResponseHandler() {

					@Override
					public void onSuccess(String successMsg) {
						// TODO Auto-generated method stub
						super.onSuccess(successMsg);
						SharedMethods.logError("Delete Contact "+successMsg);
						AddNewPhoneResponse contactResponse = new AddNewPhoneResponse(successMsg, 200, "");
						response = contactResponse;
						refreshViewInTheUIThread();
					}

					@Override
					public void onFailure(int statusCode, String content) {
						// TODO Auto-generated method stub
						super.onFailure(statusCode, content);
						SharedMethods.logError("Delete Contact error "+content);
						AddNewPhoneResponse contactResponse = new AddNewPhoneResponse(content, statusCode, getResources().getString(R.string.NO_NETWORK_TRY_AGAIN_MSG));
						response = contactResponse;
						refreshViewInTheUIThread();
					}
				},null);*/
				
				Bundle bundle = new Bundle();
				bundle.putString(Constants.ERROR_D,
						getResources().getString(R.string.DELETE_PHONE_MSG));
				bundle.putString(Constants.TYPE, Constants.DELETE_PHONE_TYPE);
				// getParent().removeDialog(Constants.ERROR_DIALOG);
				getParent().showDialog(Constants.ERROR_DIALOG, bundle);
			}
		});
		
	}
	
	public void deletePhone()
	{
		
		getParent().showDialog(Constants.SHOW_DIALOG);
		NewPhone newPhone = addEditPhone();
		AsyncHttpClient httpClient = new AsyncHttpClient(
				Constants.BASE_URL+Constants.PHONE_DELETE+phone.getPhoneID());
		httpClient.setBasicAuthToken(appUsr.getToken());
		httpClient.delete(FRSPhoneMaintenance.this, null, null,
				new ResponseHandler() {

			@Override
			public void onSuccess(String successMsg) {
				// TODO Auto-generated method stub
				super.onSuccess(successMsg);
				SharedMethods.logError("Delete Contact "+successMsg);
				AddNewPhoneResponse contactResponse = new AddNewPhoneResponse(successMsg, 200, "");
				response = contactResponse;
				refreshViewInTheUIThread();
			}

			@Override
			public void onFailure(int statusCode, String content) {
				// TODO Auto-generated method stub
				super.onFailure(statusCode, content);
				SharedMethods.logError("Delete Contact error "+content);
				AddNewPhoneResponse contactResponse = new AddNewPhoneResponse(content, statusCode, getResources().getString(R.string.NO_NETWORK_TRY_AGAIN_MSG));
				response = contactResponse;
				refreshViewInTheUIThread();
			}
		},null);
	}

	@Override
	protected void refreshUI() {
		// TODO Auto-generated method stub
		
		getParent().removeDialog(Constants.SHOW_DIALOG);

		if(response instanceof AddNewPhoneResponse){
			AddNewPhoneResponse cRes = (AddNewPhoneResponse) response;
			if(cRes.getResponseCode() == Constants.NETWORK_SUCCESS){
				List<Contact> contact_list = ContactsDataManager.getSharedInstance().getContactslist();
				//titlename.setText(clientName);
				for (Contact con : contact_list){
					
					if(con.getId() == contactId) 
					{
						contact = con;
						break;
					}
					
				}
				if(Constants.phoneType == PhoneType.Add_Phone ){
				 contact.addItemToPhoneList(cRes.getPhone(),newPhone.getIsPrimary());
				/*	Bundle bundle = new Bundle();
					Constants.contactType = ContactType.Add_Contact;
					//bundle.putBoolean(Constants.NEW_CONTACT_RECORD, true);
					bundle.putInt(Constants.CONTACT_ID, contactId);
					if(newAddress.getIsPrimary()){
						bundle.putInt("PRIMARY_ADDRESS_ID",cRes.getAddress().getId());
					}
					Intent intent;
					intent = new Intent(FRSAddressMaintenance.this,FRSAddressList.class);
					intent.putExtras(bundle);
					com.frontrow.ui.TabManager parentActivity = (TabManager) getParent();
					parentActivity.startChild("AddressList_Activity",
							intent);*/
				 finish();
				}
				else if(Constants.phoneType == PhoneType.Edit_Phone){
					 contact.modifyItemInPhoneList(cRes.getPhone(),newPhone.getIsPrimary());
				/*	Bundle bundle = new Bundle();
					Constants.contactType = ContactType.Add_Contact;
					//bundle.putBoolean(Constants.NEW_CONTACT_RECORD, true);
					bundle.putInt(Constants.CONTACT_ID, contactId);
					if(newAddress.getIsPrimary()){
						bundle.putInt("PRIMARY_ADDRESS_ID",cRes.getAddress().getId());
					}
					Intent intent;
					intent = new Intent(FRSAddressMaintenance.this,FRSAddressList.class);
					intent.putExtras(bundle);
					com.frontrow.ui.TabManager parentActivity = (TabManager) getParent();
					parentActivity.startChild("AddressList_Activity",
							intent);*/
					 finish();
				}
				else if (Constants.phoneType == PhoneType.Delete_Phone){
					 contact.removeItemInPhoneList(phone,newPhone.getIsPrimary());
					 finish();
				}
			}else{
				Bundle b = new Bundle();
				b.putString(Constants.TYPE, Constants.GENARAL_ERROR_TYPE);
				b.putString(Constants.ERROR_D, ((AddNewAddressRespone) response).getResponseMessage());
				getParent().showDialog(Constants.ERROR_DIALOG, b);
			}

		}
	}


	@Override
	public void addPhone(View v) {
		// TODO Auto-generated method stub
		if(v == editPhone){
			Constants.phoneType = PhoneType.Edit_Phone;
			enableComponents();
			addbtn.setText(getResources().getString(R.string.EDIT_PHONE));
		}
	}
	
	
	
	private void disableComponets() {

        deletebtn.setVisibility(View.VISIBLE);
        addbtn.setVisibility(View.GONE);
		number.setEnabled(false);
		phonerelationshipTypeSpinner.setEnabled(false);
		primary.setEnabled(false);
	}

	private void enableComponents() {
	
		deletebtn.setVisibility(View.GONE);
	    addbtn.setVisibility(View.VISIBLE);
		number.setEnabled(true);
		phonerelationshipTypeSpinner.setEnabled(true);
		primary.setEnabled(true);
		
	}
	
	private void setData(){
		int phoneRelationshipId = 0;
		
	
				for(int i=0;i<phoneRelationshipTypeList.size();i++){
					ContactRelationship cRelat = phoneRelationshipTypeList.get(i);
					if(cRelat.getId() == phone.getPhnRelationshipId()){
						phoneRelationshipId = i;
						break;
					}
				}							
		
				phonerelationshipTypeSpinner.setSelection(phoneRelationshipId);
		/* Set primary Address Values */
		number.setText(phone.getPhoneNumber());
		primary.setChecked(phone.getIsPrimary());
	}
	
	private NewPhone addEditPhone(){
		 newPhone = new NewPhone();
		 newPhone.setNumber(number.getText().toString());
		 newPhone.setRelationshipID(phoneRelationshipId);
		 newPhone.setIsPrimary(primary.isChecked());
		 newPhone.setContactId(contactId);
		 newPhone.setCompanyCode(appUsr.getCompanyId());
		 
		 
		if(Constants.phoneType == PhoneType.Edit_Phone || Constants.phoneType == PhoneType.Edit_Phone){
			newPhone.setId(phone.getPhoneID());
		}
		return newPhone;
	}
	
	@Override
	public void onResume() {
	
		super.onResume();
		setAddPhoneListener(this);
	}
}
