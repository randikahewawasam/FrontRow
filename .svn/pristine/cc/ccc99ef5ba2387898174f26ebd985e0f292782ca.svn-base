package com.frontrow.android.db;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.Set;

import com.frontrow.common.SharedMethods;
import com.row.mix.beans.ActivityCard;
import com.row.mix.beans.Answers;
import com.row.mix.beans.Questions;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.webkit.WebChromeClient.CustomViewCallback;

public class QuestionDB extends FrontRowDBHelper{

	public static final String QUESTION_NAME = "QuestionName";
	public static final String QUESTION_ID = "QuestionId";
	public static final String CARD_TYPE_ID = "CardTypeId";
	public static final String QUESTION_TYPE = "QuestionType";
	public static final String QUESTION_SEQUENCE ="QuenstionSequence";
	public static final String _ID = "ID";

	private static QuestionDB instance;
	public final static String TABLE ="Questions";
	private Context context;

	/*	public static QuestionDB getSharedInstance(){
		if(instance == null){
			instance = new QuestionDB();
		}
		return instance;
	}

	@Override
	public void open() {
		// TODO Auto-generated method stub
		super.open();
	}*/

	public QuestionDB(Context ctx) {
		// TODO Auto-generated constructor stub
		super();
		this.context = ctx;
	}

	public long addQuestions(LinkedHashMap<ActivityCard, LinkedHashMap<Questions, ArrayList<Answers>>> questAns) {
		long count =-2;
		int question_id = 0;
		deleteData();
		AnswersDB ansDb = new AnswersDB(this.context);
		//ansDb.open();
		ansDb.isAnsweresAvailable();

		Set<ActivityCard> cards = questAns.keySet();
		Iterator<ActivityCard> itr = cards.iterator();
		while (itr.hasNext()) {
			ActivityCard card = itr.next();
			LinkedHashMap<Questions, ArrayList<Answers>>qAns = questAns.get(card);
			Set<Questions> q = qAns.keySet();
			Iterator<Questions> qItr = q.iterator();
			while (qItr.hasNext()) {
				SQLiteDatabase db= this.getWritableDatabase();
				Questions questions =qItr.next();
				ArrayList<Answers> ans = qAns.get(questions);
				ContentValues content = new ContentValues();
				content.put(QUESTION_NAME, questions.getQuestion());
				content.put(QUESTION_ID, questions.getQuestionId());
				content.put(CARD_TYPE_ID, card.getCardId());
				content.put(QUESTION_SEQUENCE, questions.getSequence());
				content.put(QUESTION_TYPE, questions.getqType());
				try {
					count = db.insert(TABLE, null, content);

				} catch (SQLException e) {
					// TODO: handle exception
					SharedMethods.logError("SQL  : "+ e.getMessage());
				}

				/* Inserting Answers for the relevant Question */

				Cursor qusCursor = this.getWritableDatabase().rawQuery("SELECT * FROM " +TABLE+" where "+QUESTION_NAME+"=? and "+CARD_TYPE_ID+"=?" , new String[]{questions.getQuestion(),Integer.toString(card.getCardId())});
				if(qusCursor != null){
					if(qusCursor.moveToNext()){
						question_id = qusCursor.getInt(qusCursor.getColumnIndex(QUESTION_ID));
						//SharedMethods.logError("QuestionId "+ question_id);
					}
				}
				db.close();
				qusCursor.close();
				ansDb.addAnswers(ans,question_id);
			}		
		}		
		return count;
	}

	public LinkedHashMap<Questions, LinkedList<Answers>> getQuestionsForSelectedCard(int cardId){
		LinkedHashMap<Questions, LinkedList<Answers>> questionAnsMap = new LinkedHashMap<Questions, LinkedList<Answers>>();
		SQLiteDatabase db= this.getWritableDatabase();
		Cursor cursor = db.query(TABLE, null, CARD_TYPE_ID+"=?", new String[]{Integer.toString(cardId)}, null, null, null);
		if(cursor != null){
			if(cursor.moveToNext()){
				do {
					Questions question = new Questions();
					question.setQuestion(cursor.getString(cursor.getColumnIndex(QUESTION_NAME)));
					question.setqType(cursor.getInt(cursor.getColumnIndex(QUESTION_TYPE)));
					question.setSequence(cursor.getInt(cursor.getColumnIndex(QUESTION_SEQUENCE)));
					LinkedList<Answers> tempAns = new AnswersDB(context).getAnswersForQuestion(cursor.getInt(cursor.getColumnIndex(QUESTION_ID)));
					questionAnsMap.put(question, tempAns);
				} while (cursor.moveToNext());
			}
		}
		db.close();
		cursor.close();
		return questionAnsMap;
	}

	public long deleteData(){
		SQLiteDatabase db= this.getWritableDatabase();
		long count = db.delete(TABLE, null, null);
		db.close();
		return count;
	}
}
