package com.frontrow.common;

import java.io.IOException;
import java.io.InputStream;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;

import com.frontrow.android.json.JSONArray;
import com.frontrow.android.json.JSONException;
import com.frontrow.android.json.JSONObject;
import com.frontrow.ui.R;
import com.google.gson.JsonArray;
import com.row.mix.beans.Location;
import com.row.mix.beans.Phone;
import com.row.mix.beans.Questions;
import com.row.mix.common.MIXKeys;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.net.Uri;
import android.text.Html;
import android.text.InputFilter;
import android.text.Spanned;
import android.util.Log;
import android.view.WindowManager;

public class SharedMethods {

	public String md5(String s) {
		try {
			// Create MD5 Hash
			MessageDigest digest = java.security.MessageDigest.getInstance("MD5");
			digest.update(s.getBytes());
			byte messageDigest[] = digest.digest();

			// Create Hex String
			StringBuffer hexString = new StringBuffer();
			for (int i=0; i<messageDigest.length; i++)
				hexString.append(Integer.toHexString(0xFF & messageDigest[i]));
			return hexString.toString();

		} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
		}
		return "";
	}

	public static void logMessage(String message) {
		Log.d(Constants.APP_DEBUG_TAG, message);
	}

	public static void logMessage(Class<?> className, String message) {
		Log.d(Constants.APP_DEBUG_TAG, className.getName() + " : " + message);
	}

	public static void logError(String errMessage) {
		if(errMessage != null)
			Log.e(Constants.APP_DEBUG_TAG, errMessage);
	}

	// To use in the catching exceptions
	public synchronized static void logException(Exception exception,
			Class<?> className) {
		if (exception.getMessage() != null) {
			Log.e(Constants.APP_DEBUG_TAG, className.getName() + " : "
					+ exception.getMessage());
		}
	}



	public static LinkedHashMap<Questions, String> sortByComparator(LinkedHashMap<Questions, String> unsortMap) {
		Map<Questions, String> rollCall = unsortMap;

		Collection<Questions> question = unsortMap.keySet();
		List<Questions> questionlist = new ArrayList<Questions>(question);
		Collections.sort(questionlist, new Comparator<Questions>() {

			@Override
			public int compare(Questions lhs, Questions rhs) {
				// TODO Auto-generated method stub
				int x= lhs.getSequence();
				int y = rhs.getSequence();
				return  x-y ;
			}
		});
		LinkedHashMap<Questions, String> sortedMap = new LinkedHashMap<Questions, String>();
		Iterator<Questions> itr = questionlist.iterator();
		while(itr.hasNext()){
			Questions tmpQ = itr.next();
			sortedMap.put(tmpQ, unsortMap.get(tmpQ));
			SharedMethods.logError("Sequence : "+ tmpQ.getSequence());
		}
		return sortedMap;
	}	

	public static AlertDialog createSingleButtonAlert(final Context activity) {
		AlertDialog.Builder alertBuilder = new AlertDialog.Builder(activity);
		//alertBuilder.setTitle(activity.getString(captionID));
		alertBuilder.setCancelable(false);
		alertBuilder.setMessage(activity.getResources().getString(R.string.UPDATES_AVAILABLE));		
		alertBuilder.setPositiveButton(activity.getResources().getString(R.string.UPDATE),
				new DialogInterface.OnClickListener() {
			@Override
			public void onClick(DialogInterface dialog, int which) {
				Intent intent = new Intent(Intent.ACTION_VIEW);
				intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
				intent.setData(Uri.parse(Constants.MARKET_URL));
				activity.startActivity(intent);
			}
		});

		AlertDialog alert = alertBuilder.create();
		WindowManager.LayoutParams lp = new WindowManager.LayoutParams();
		lp.copyFrom(alert.getWindow().getAttributes());
		lp.width = WindowManager.LayoutParams.FILL_PARENT;
		lp.height = WindowManager.LayoutParams.WRAP_CONTENT;
		alert.setOwnerActivity((Activity) activity);
		alert.getWindow().setLayout(lp.width, lp.height);
		return alert;
	}
	
	public static void callPhone(Context ctx,String number) {
		String phoneNumber = number;
		Uri phn_uri = Uri.fromParts("tel", phoneNumber, null);
		Intent callIntent = new Intent(Intent.ACTION_CALL, phn_uri);
		callIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
		ctx.startActivity(callIntent);
	}
	
	public static int calculateZoom(double minLng, double maxLng,
			double minLat, double maxLat, int mapWidth, int mapHeight) {

		long[] pixelRange = new long[19];
		long pixels = 256l;
		for (int z = 0; z <= 18; z++) {
			pixelRange[z] = pixels;
			pixels *= 2;
		}
		for (int z = 18; z > 0; z--) {
			long[] btmLeftPxl = fromLatLngToPxl(minLng, minLat, z);
			long[] topRghtPxl = fromLatLngToPxl(maxLng, maxLat, z);

			if (btmLeftPxl[0] > topRghtPxl[0])
				btmLeftPxl[0] -= pixelRange[z];
			if (Math.abs(topRghtPxl[0] - btmLeftPxl[0]) <= mapWidth
					&& Math.abs(topRghtPxl[1] - btmLeftPxl[1]) <= mapHeight)
				return z;
		}
		return 0;
	}
	
	public static long[] fromLatLngToPxl(double lat, double lng, int zoom) {
		long[] result = new long[2];
		long[] pixelRange = new long[19];
		long pixels = 256l;
		long origin;
		long[] pixelsPerLonDegree = new long[19];
		long[] pixelsPerLonRadian = new long[19];
		long o = 0l;
		for (int z = 0; z <= 18; z++) {
			origin = pixels / 2;
			pixelsPerLonDegree[z] = pixels / 360;
			pixelsPerLonRadian[z] = ((long) (pixels / (2 * Math.PI)));
			if (z == zoom) {
				o = origin;
				break;
			}
			pixelRange[z] = pixels;
			pixels *= 2;
		}
		result[0] = Math.round(o + lng * pixelsPerLonDegree[zoom]);
		double siny = Math.sin(Math.toRadians(lat));
		siny = (siny < -0.9999) ? -0.9999 : (siny > 0.9999) ? 0.9999 : siny;
		result[1] = Math.round(o + 0.5 * Math.log((1 + siny) / (1 - siny))* -pixelsPerLonRadian[zoom]);

		return result;
	}
	
	public static Location getLocationInfo(String address) {
        StringBuilder stringBuilder = new StringBuilder();
        Location location = new Location();
        try {

        address = address.replaceAll(" ","%20");    

        HttpPost httppost = new HttpPost("http://maps.google.com/maps/api/geocode/json?address=" + address + "&sensor=false");
        HttpClient client = new DefaultHttpClient();
        HttpResponse response;
        stringBuilder = new StringBuilder();


            response = client.execute(httppost);
            HttpEntity entity = response.getEntity();
            InputStream stream = entity.getContent();
            int b;
            while ((b = stream.read()) != -1) {
                stringBuilder.append((char) b);
            }
        } catch (ClientProtocolException e) {
        } catch (IOException e) {
        }

        JSONObject jsonObject = new JSONObject();
        try {
            jsonObject = new JSONObject(stringBuilder.toString());
        } catch (JSONException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        JSONArray jarray =  jsonObject.names();
        JSONArray jsonobj;
        SharedMethods.logError("Test");
        double lat,lng;
        for(int q=0;q< jarray.length();q++){
        	try {
				if(jarray.getString(q).equals("status")){
					if(!jsonObject.isNull(jarray.getString(q))){
						location.setStatus(jsonObject.getString(jarray.getString(q)));
					
					}
				}
					
				   else if(jarray.getString(q).equals("results" )){
					   jsonobj = jsonObject.getJSONArray(jarray.getString(q));
				      	 
				      	 //JSONArray tempLocation = jsonobj.names();
								//phone = new Phone();
								for(int k=0;k<jsonobj.length();k++){
									//contactlistArry.getJSONObject(i)
									  JSONObject jsonobj2=jsonobj.getJSONObject(k);
									
									  //JSONArray tempLocation = jsonobj2.names();  
									  //for (int t=0;t<tempLocation.length();t++){
									    //if(tempLocation.getString(t).equals("geometry")){
										if(!jsonobj2.isNull("geometry")){
											 JSONObject jsonobj3 = jsonobj2.getJSONObject("geometry");
											if (!jsonobj3.isNull("location")){
												 JSONObject jsonobj4 = jsonobj3.getJSONObject("location");
												 if(!jsonobj4.isNull("lng")){
													// JSONObject jsonobj5 = jsonobj4.getJSONObject("lng"); 
													  location.setLng(jsonobj4.getDouble("lng"));
												 }
												 if(!jsonobj4.isNull("lat")){
													 //JSONObject jsonobj5 = jsonobj4.getJSONObject("lat"); 
													  location.setLat(jsonobj4.getDouble("lat"));
												 }
											}
										}
									//}
									 // }
								}
							
				      	 //contact.setPrimaryPhone(phone);
						}
					
				
				
      
			} catch (JSONException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
       
    }

        return location;
        
	}
	
	 public static void sendEmail(Context ctx,String emailadd) {
		  Intent emailIntent = new Intent(android.content.Intent.ACTION_SEND);
		  emailIntent.setType("text/html");
		  emailIntent.putExtra(android.content.Intent.EXTRA_EMAIL, new String[]{emailadd});
		  emailIntent.putExtra(android.content.Intent.EXTRA_SUBJECT, "testing email send.");
		  emailIntent.putExtra(android.content.Intent.EXTRA_TEXT, Html.fromHtml("<b>this is html text in email body.</b>"));
		  ctx.startActivity(Intent.createChooser(emailIntent, "Email to Friend"));
		
		 }


}
